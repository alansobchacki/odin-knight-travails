Imaginary tiny chess board for thinking purposes:

Board squares are array indexes.

00 01 02 03 04
05 06 07 08 09
â™ž 11 12 13 14
15 16 17 18 19
20 21 22 23 24

Build a nested array as follows:

board = [
    [row, column, [ ]],
    [row, column, [ ]],
    # until we have a full board of 64 squares
    # build a loop for this
]

Row and column values will range from 0 to 7. if at anytime our knight tries to move to a value that
is lower or bigger than 0 or 7, it is an invalid move.

Valid moves:

[1, 2], [-2, -1], [-1, 2], [2, -1], [1, -2], [-2, 1], [-1, -2], [2, 1]

Treat this as a binary search tree with a BFS methodology. Your coordinates are nodes, 
and every coordinate you can visit are its children.

            [0,0]
            /   \ 
         [2,1]  [1,2]

Get the results from the @visited variable, convert into an array, build a BST, track the right nodes.